2022-01-09 19:51:45,971 INFO    MainThread:1236 [wandb_setup.py:_flush():71] setting env: {}
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_setup.py:_flush():71] setting login settings: {}
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_init.py:_log_setup():371] Logging user logs to C:\Users\benba\Documents\University\Masterarbeit\Depth-Semantic-UDA\wandb\run-20220109_195145-n1qzxu81\logs\debug.log
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_init.py:_log_setup():372] Logging internal logs to C:\Users\benba\Documents\University\Masterarbeit\Depth-Semantic-UDA\wandb\run-20220109_195145-n1qzxu81\logs\debug-internal.log
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_init.py:init():404] calling init triggers
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_init.py:init():411] wandb.init called with sweep_config: {}
config: {'cfg': CfgNode({'experiment_name': 'synthia_to_cityscapes', 'train': CfgNode({'nof_epochs': 40, 'nof_workers': 4, 'batch_size': 1, 'optimizer': CfgNode({'type': 'Adam', 'learning_rate': 0.0001}), 'scheduler': CfgNode({'type': 'MultiStepLR', 'step_size': 10, 'gamma': 0.5, 'milestones': [30]})}), 'val': CfgNode({'batch_size': 1, 'nof_workers': 4}), 'model': CfgNode({'type': 'guda', 'encoder': CfgNode({'params': CfgNode({'nof_layers': 101, 'weights_init': 'pretrained'})}), 'depth_net': CfgNode({'params': CfgNode({}), 'nof_scales': 4}), 'semantic_net': CfgNode({'params': CfgNode({})}), 'pose_net': CfgNode({'input': 'pairs', 'params': CfgNode({'nof_layers': 18, 'weights_init': 'pretrained'})})}), 'datasets': CfgNode({'paths_to_configs': ['C:\\Users\\benba\\Documents\\University\\Masterarbeit\\Depth-Semantic-UDA\\cfg\\yaml_files\\train\\guda\\synthia.yaml', 'C:\\Users\\benba\\Documents\\University\\Masterarbeit\\Depth-Semantic-UDA\\cfg\\yaml_files\\train\\guda\\gta5.yaml'], 'configs': [CfgNode({'dataset': CfgNode({'name': 'synthia_rand_cityscapes', 'path': 'C:\\Users\\benba\\Documents\\University\\Masterarbeit\\data\\SYNTHIA_RAND_CITYSCAPES\\RAND_CITYSCAPES', 'feed_img_size': [512, 320], 'use_sparse_depth': False, 'use_dense_depth': True, 'use_self_supervised_depth': False, 'use_semantic_gt': True, 'split': None, 'camera': 'pinhole', 'min_depth': 0.01, 'max_depth': 655.35, 'shuffle': True, 'img_norm': True, 'num_classes': 19, 'rgb_frame_offsets': [0], 'sequence_dataset': False, 'augmentation': CfgNode({'brightness_jitter': 0.2, 'contrast_jitter': 0.2, 'saturation_jitter': 0.2, 'hue_jitter': 0.1, 'horizontal_flip': 0.5})}), 'losses': CfgNode({'loss_names_and_parameters': [{'silog_depth': {'weight': 0.85}, 'bce': {'r': 0.3, 'ignore_index': 250}, 'snr': 'None'}], 'loss_names_and_weights': [{'silog_depth': 1, 'bce': 0.001, 'snr': 0.01}]}), 'eval': CfgNode({'use_garg_crop': True, 'train': CfgNode({'gt_depth_available': True, 'gt_semantic_available': True, 'use_gt_scale': True}), 'val': CfgNode({'gt_depth_available': True, 'gt_semantic_available': True, 'use_gt_scale': True}), 'test': CfgNode({'gt_depth_available': True, 'gt_semantic_available': True, 'use_gt_scale': True})})}), CfgNode({'dataset': CfgNode({'name': 'gta5', 'path': 'C:\\Users\\benba\\Documents\\University\\Masterarbeit\\data\\gta5', 'feed_img_size': [512, 320], 'use_sparse_depth': False, 'use_dense_depth': False, 'use_self_supervised_depth': True, 'use_semantic_gt': False, 'split': None, 'camera': 'pinhole', 'min_depth': 0.01, 'max_depth': 655.35, 'shuffle': True, 'img_norm': True, 'num_classes': 19, 'rgb_frame_offsets': [0, -1, 1], 'sequence_dataset': True, 'augmentation': CfgNode({'brightness_jitter': 0.2, 'contrast_jitter': 0.2, 'saturation_jitter': 0.2, 'hue_jitter': 0.1, 'horizontal_flip': 0.5})}), 'losses': CfgNode({'loss_names_and_parameters': [{'reconstruction': {'use_ssim': True, 'use_automasking': True}}], 'loss_names_and_weights': [{'reconstruction': 1}]}), 'eval': CfgNode({'use_garg_crop': True, 'train': CfgNode({'gt_depth_available': False, 'gt_semantic_available': False, 'use_gt_scale': False}), 'val': CfgNode({'gt_depth_available': False, 'gt_semantic_available': True, 'use_gt_scale': False}), 'test': CfgNode({'gt_depth_available': False, 'gt_semantic_available': True, 'use_gt_scale': False})})})], 'loss_weights': [1, 1]}), 'device': CfgNode({'no_cuda': False, 'multiple_gpus': False}), 'io': CfgNode({'path_save': '/home/petek/trained_models/depth_estimation', 'save_frequency': 1, 'log_frequency': 250}), 'checkpoint': CfgNode({'use_checkpoint': False, 'path_base': '', 'filename': ''})})}
2022-01-09 19:51:45,972 INFO    MainThread:1236 [wandb_init.py:init():460] starting backend
2022-01-09 19:51:45,972 INFO    MainThread:1236 [backend.py:_multiprocessing_setup():101] multiprocessing start_methods=spawn, using: spawn
2022-01-09 19:51:45,976 INFO    MainThread:1236 [backend.py:ensure_launched():216] starting backend process...
2022-01-09 19:51:46,028 INFO    MainThread:1236 [backend.py:ensure_launched():222] started backend process with pid: 9460
2022-01-09 19:51:46,029 INFO    MainThread:1236 [wandb_init.py:init():469] backend started and connected
2022-01-09 19:51:46,030 INFO    MainThread:1236 [wandb_init.py:init():533] updated telemetry
2022-01-09 19:51:46,060 INFO    MainThread:1236 [wandb_init.py:init():563] communicating current version
2022-01-09 19:51:46,986 INFO    MainThread:1236 [wandb_init.py:init():568] got version response 
2022-01-09 19:51:46,986 INFO    MainThread:1236 [wandb_init.py:init():578] communicating run to backend with 30 second timeout
2022-01-09 19:51:47,242 INFO    MainThread:1236 [wandb_init.py:init():606] starting run threads in backend
2022-01-09 19:51:47,366 INFO    MainThread:1236 [wandb_run.py:_console_start():1810] atexit reg
2022-01-09 19:51:47,367 INFO    MainThread:1236 [wandb_run.py:_redirect():1684] redirect: SettingsConsole.WRAP
2022-01-09 19:51:47,367 INFO    MainThread:1236 [wandb_run.py:_redirect():1721] Wrapping output streams.
2022-01-09 19:51:47,368 INFO    MainThread:1236 [wandb_run.py:_redirect():1745] Redirects installed.
2022-01-09 19:51:47,368 INFO    MainThread:1236 [wandb_init.py:init():633] run started, returning control to user process
